syntax = "proto3";

package janus;

option go_package = "github.com/JaneliaSciComp/janus/proto";

option java_package = "org.janus.api";
option java_multiple_files = true;


enum DataFormat {
  N5 = 0; // Only one initially implemented.
  ZARR = 1;
  NG_UNSHARDED = 2;
  NG_SHARDED = 3;
}

message Dataset {
  string path = 1;
}

message DatasetSpec {
  Dataset dataset = 1;
  DataFormat layout = 2;
  uint32 numDims = 3; // number of dimensions
  repeated uint32 dimBits = 4; // number of bits to represent each dimension
  string metadata = 5; // DataFormat-specific metadata
}

// A Version is a unique monotically increasing ID per Dataset.
// Its git equivalent is either a working directory OR a committed version.
message Version {
  uint64 id = 1;
}

// A Session represents an uncommitted version where chunks can be written.
// Its git equivalent would be a working directory.
message Session {
  Version version = 1;
}

// A nD coordinate for a chunk of data.
message ChunkCoord {
  repeated uint64 coord = 1;
}

// Chunk references give advanced clients location of last change for given chunks
//  via (version, chunk coord) tuple.
message ChunkRefs {
  repeated uint64 versions = 1;
  repeated ChunkCoord coords = 2;
}

// Note: If serialization/deserialization of large chunk data is too costly,
//  we can bypass embedding in protobuf message and send directly afterwards.
//  After we determine our actual workflow requirements, we can test CapnProto
//  since API is small and retooling not so costly. This isn't a factor
//  if the client writes/reads directly from the chunk storage using the
//  advanced client rpcs: GetVersionChunkRefs() and MarkIngestedChunks().
message Chunk {
  ChunkCoord coord = 1;
  bytes data = 2; // whole message must be less than 2GiB (protobuf limit)
}

message Chunks {
  repeated Chunk chunks = 1;
}

service ChunkIndexer {
  rpc NewDataset(NewDatasetRequest) returns (NewDatasetResponse);

  // Create new session for user if one not present or previous one committed, or returns old uncommitted session.
  rpc OpenSession(SessionRequest) returns (Session);

  // Commits and closes the session.
  rpc CommitSession(CommitRequest) returns (CommitResponse);

  // Write chunks in a session.
  rpc WriteChunks(WriteRequest) returns (WriteResponse);

  // Read chunks in a session.
  rpc ReadChunks(ReadRequest) returns (Chunks);

  // Read chunks from any given version.
  rpc ReadVersionChunks(ReadVersionRequest) returns (Chunks);

  // ---- For advanced clients that read/write directly to backing store.

  // Get location of chunks, i.e., (version, chunk coord) tuples, for set of chunk coords at a given version.
  rpc GetVersionChunkRefs(ReadVersionRequest) returns (ChunkRefs);

  // Update the Janus server index for chunks that have been altered using direct writes to chunk storage.
  rpc MarkIngestedChunks(MarkIngestedRequest) returns (MarkIngestedResponse);
}

// ---- Request messages.

message NewDatasetRequest {
  DatasetSpec spec = 1;
}

message SessionRequest {
  string client = 1;   // user (e.g., email), program name, etc.
  Dataset dataset = 2;
  Version parent = 3;  // version ID of the parent to desired session.
  optional bool base = 4; // if true, previous data is discarded and we start with fresh nD volume.
}

message CommitRequest {
  Session session = 1;
  string message = 2;
}

message WriteRequest {
  Session session = 1;
  Chunks chunks = 2;
}

message ReadRequest {
  Session session = 1;
  repeated ChunkCoord coords = 2;
}

message ReadVersionRequest {
  Version version = 1;
  repeated ChunkCoord coords = 2;
}

message MarkIngestedRequest {
  Session session = 1;
  repeated ChunkCoord coords = 2;
}

// ---- Response messages, all currently empty but data can be added while maintaining backwards-compatibility.

message NewDatasetResponse {}
message CommitResponse {}
message WriteResponse {}
message MarkIngestedResponse {}